1- Pourquoi ne puis-je pas demander à Cassandra de se mettre en écoute sur l’adresse 0.0.0.0 (toutes mes adresses) ?

Cassandra est un système distribué NoSQL et open source (développé à l'origine par Facebook et devenu depuis un proje
t de la Fondation Apache) fondé sur un mécanisme de « propagation de rumeurs de proche en proche » (gossip architecture). La ListenAddress est aussi l’adresse « mon adresse de contact », c’est-à-dire l’adresse qu’un nœud donne aux autres nœuds pour 
le contacter. Dire aux autres nœuds « contactez-moi sur n'importe laquelle de mes adresses » est une mauvaise idée 
; si différents nœuds du cluster choisissent différentes adresses pour vous contacter, toutes sortes de problèmes se produisent…
Si vous ne voulez pas configurer manuellement une adresse IP d’écoute pour chaque nœud dans votre cluster
(ce que l’on peut comprendre !), laissez-la à blanc et Cassandra utilisera la fonction InetAddress.getLocalHost() 
pour choisir une adresse. Ensuite, c’est à vous ou à votre équipe d’admin/exploitants de faire en sorte que les adresses 
soient traduites correctement (/etc/hosts/, dns, etc.).

 2-Que se passe-t-il pour les données existant dans mon cluster quand j’ajoute de nouveaux nœuds ?


Quand un nouveau nœud rejoint un cluster, il va contacter
automatiquement les autres nœuds du cluster et copier les données voulues vers lui-même.

3- Quels sont les ports utilisés par Cassandra ?


Par défaut, Cassandra utilise le port 7000 pour la communication cluster (7001 si le SSL est activé),
9160 pour les clients et 7199 pour JMX. L’interconnexion de la communication et les
Thrift ports sont configurables dans cassandra.yaml, et le port JMX est configurable 
dans cassandra-env.sh (options JVM). Tous ces ports sont TCP.


4- J’efface des données de Cassandra, mais l'utilisation du disque reste la même. Pourquoi ?

Les données que vous écrivez dans Cassandra sont persistantes dans les SSTables. 
Comme les SSTables sont persistantes, les données ne peuvent pas réellement être 
supprimées lorsque vous effectuez une suppression ; au lieu de cela, un marqueur 
(appelé tombstone, ou « pierre tombale ») est positionné pour indiquer le nouveau statut.
N’ayez crainte, dès que le premier compactage aura lieu entre les données et la pierre tombale, 
les données ainsi marquées seront complètement purgées et l'espace disque correspondant récupéré.
Voir DistributedDeletes pour plus de détails.


5-Pourquoi l’anneau nodetool n’affiche qu’une seule entrée, alors que mes nœuds ont écrit, dans les fichiers de trace (logs), qu’ils ont vu les autres nœuds rejoindre l’anneau ?


Cela arrive quand vous avez le même jeton (token) affecté à chaque nœud. Il ne faut pas faire cela.
Le plus souvent, ce problème arrive aux personnes qui installent Cassandra sur une VM (particulièrement
quand on utilise un package Debian qui s’auto-exécute après l’installation, ce qui génère et sauvegarde un jeton). 
Ensuite, si on clone cette VM pour créer les autres nœuds, cela copie aussi le jeton.

La meilleure solution est d'effacer les répertoires de données et de « commitlog », 
ce qui assure que chaque nœud générera un jeton aléatoire au prochain redémarrage.

6- Puis-je changer le ReplicationFactor sur un cluster qui tourne ?


Oui, mais cela nécessite de faire tourner une réparation pour modifier le nombre de copies des données existantes.

    Modifier le ReplicationFactor à la valeur désirée à l’aide de cassandra-cli.


Si vous réduisez le ReplicationFactor :

    exécutez "nodetool cleanup" pour supprimer les données répliquées de façon surnuméraire. Le nettoyage s'exécute sur une base nœud par nœud.


Si vous augmentez le ReplicationFactor :

    exécutez "nodetool repair" pour lancer une réparation antientropie sur le cluster.
    La réparation fonctionne sur une base par réplique. Il s'agit d'un processus 
    intensif qui peut entraîner une baisse des performances du cluster. Il est fortement
    recommandé de faire une réparation progressive, car une tentative de réparer tout le cluster d’un 
    seul coup a toutes les chances de le saturer complètement.
   
   
   7-Nodetool indique "Connection refused to host: 127.0.1.1" pour tout hôte distant. Que se passe-t-il ?


Nodetool s’appuie sur JMX, qui repose lui-même sur RMI (API Java de réseau),
lequel à son tour met en place ses propres auditeurs (listeners) et les 
connecteurs selon les besoins à chaque extrémité de l’échange. Normalement, tout cela se passe de manière
transparente, mais des erreurs de résolution de nom pour l’hôte demandant 
la connexion ou celui la recevant, peuvent entraîner des confusions et des exceptions incompréhensibles.
Si vous n’utilisez pas de DNS, assurez-vous que vos fichiers /etc/hosts sont
corrects aux deux extrémités de la connexion. Si cela échoue, essayez de régler 
le l’option JVM –Djava.rmi.server.hostname = <nompublic> près du bas du cassandra-env.sh,
à une interface que vous pouvez atteindre à partir de la machine distante.

 8-Comment parcourir toutes les lignes d'une ColumnFamily ?


Utilisez un client CQL ([ClientOptions]) et Cassandra 2.0. La version 2.0 supporte les curseurs, ce qui signifie que vous pouvez juste écrire "SELECT * FROM toto" et vous pourrez itérer de façon automatique sur le curseur résultat.
Sinon, vous pouvez utiliser HadoopSupport.


